"""P√°gina de Gesti√≥n de Modelos Personalizados.

Esta p√°gina proporciona funcionalidad para:
- Onboarding interactivo para crear modelos custom
- Editor de c√≥digo para definir modelos
- Carga de archivos Python con definiciones de modelos
- Gesti√≥n de modelos definidos
- Integraci√≥n con el pipeline de entrenamiento
"""

import streamlit as st
import sys
from pathlib import Path
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
import tempfile
import importlib.util
import inspect

# Add src to path
root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path))

from src.models.persistence import (
    save_custom_model,
    load_custom_model,
    list_saved_models,
    create_model_bundle,
    load_model_bundle,
)
from src.models.custom_base import BaseCustomModel, BaseCustomClassifier, BaseCustomRegressor

# Page config
st.set_page_config(
    page_title="Modelos Personalizados",
    page_icon="üîß",
    layout="wide"
)

# Define custom models directory
CUSTOM_MODELS_DIR = root_path / "models" / "custom"
CUSTOM_MODELS_DIR.mkdir(parents=True, exist_ok=True)

# Define code templates directory
CODE_TEMPLATES_DIR = root_path / "src" / "models" / "custom"
CODE_TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)

# Initialize session state
if "onboarding_completed" not in st.session_state:
    st.session_state.onboarding_completed = False
if "show_onboarding" not in st.session_state:
    st.session_state.show_onboarding = True
if "current_step" not in st.session_state:
    st.session_state.current_step = 0
if "custom_model_code" not in st.session_state:
    st.session_state.custom_model_code = ""
if "loaded_model_classes" not in st.session_state:
    st.session_state.loaded_model_classes = []


# ============================================================================
# ONBOARDING CONTENT
# ============================================================================

ONBOARDING_STEPS = [
    {
        "title": "üéØ Bienvenido al Sistema de Modelos Personalizados",
        "content": """
        ### ¬øQu√© son los Modelos Personalizados?
        
        Los **Modelos Personalizados** te permiten crear tus propias arquitecturas de Machine Learning 
        que se integran perfectamente con el sistema de predicci√≥n de mortalidad por IAM.
        
        #### ‚ú® Caracter√≠sticas principales:
        
        - üîß **Compatibilidad total con scikit-learn**: Usa `fit()`, `predict()`, y `predict_proba()`
        - üîÑ **Integraci√≥n autom√°tica**: Se integran con el pipeline de entrenamiento y evaluaci√≥n
        - üìä **M√©tricas completas**: Obt√©n ROC-AUC, AUPRC, y todas las m√©tricas est√°ndar
        - üîç **Explicabilidad**: Genera valores SHAP y feature importance
        - üíæ **Persistencia**: Guarda y carga modelos con versionado autom√°tico
        - üìà **Dashboard**: Gestiona tus modelos desde la interfaz web
        
        #### üéì ¬øPara qui√©n es esto?
        
        Este sistema est√° dise√±ado para **programadores e investigadores** que quieren:
        - Experimentar con arquitecturas personalizadas
        - Implementar modelos de papers de investigaci√≥n
        - Comparar nuevos enfoques con modelos est√°ndar
        - Mantener control total sobre el proceso de entrenamiento
        """,
        "icon": "üéØ"
    },
    {
        "title": "üèóÔ∏è Arquitectura del Sistema",
        "content": """
        ### Estructura de un Modelo Personalizado
        
        El sistema se basa en **clases base** que proporcionan la estructura necesaria:
        
        ```
        BaseCustomModel (Abstracta)
        ‚îú‚îÄ‚îÄ BaseCustomClassifier ‚Üí Para clasificaci√≥n
        ‚îî‚îÄ‚îÄ BaseCustomRegressor  ‚Üí Para regresi√≥n
        ```
        
        #### üìã M√©todos Requeridos:
        
        **Para todos los modelos:**
        - `__init__()` - Constructor con hiperpar√°metros
        - `fit(X, y)` - Entrenar el modelo
        - `predict(X)` - Hacer predicciones
        - `get_params()` / `set_params()` - Gesti√≥n de par√°metros
        
        **Para clasificadores (adicional):**
        - `predict_proba(X)` - Probabilidades de clase
        - `classes_` - Array con las clases (se establece en `fit`)
        
        #### üîÑ Flujo de Trabajo:
        
        1. **Definir** tu modelo heredando de `BaseCustomClassifier`
        2. **Implementar** los m√©todos requeridos
        3. **Guardar** el c√≥digo Python del modelo
        4. **Entrenar** usando el dashboard (p√°gina ü§ñ Model Training)
        5. **Evaluar** con todas las m√©tricas (p√°gina üìà Model Evaluation)
        6. **Explicar** con SHAP y feature importance (p√°gina üîç Explainability)
        """,
        "icon": "üèóÔ∏è"
    },
    {
        "title": "üìù Ejemplo: Clasificador Simple",
        "content": """
        ### Ejemplo B√°sico de Clasificador
        
        Aqu√≠ tienes un ejemplo completo de un clasificador personalizado:
        
        ```python
        from src.models.custom_base import BaseCustomClassifier
        from sklearn.ensemble import RandomForestClassifier
        import numpy as np
        
        class MiClasificadorRF(BaseCustomClassifier):
            '''Clasificador Random Forest personalizado con post-procesamiento.'''
            
            def __init__(self, n_estimators=100, max_depth=None, 
                         threshold=0.5, name="MiClasificadorRF"):
                super().__init__(name=name)
                self.n_estimators = n_estimators
                self.max_depth = max_depth
                self.threshold = threshold
                
                # Modelo interno
                self._rf = RandomForestClassifier(
                    n_estimators=n_estimators,
                    max_depth=max_depth,
                    random_state=42
                )
            
            def fit(self, X, y, **kwargs):
                '''Entrenar el modelo.'''
                # Validar entrada
                self._validate_input(X, training=True)
                y = self._validate_targets(y, training=True)
                
                # Convertir a array si es necesario
                X = self._convert_to_array(X)
                
                # Entrenar
                self._rf.fit(X, y)
                self.is_fitted_ = True
                
                return self
            
            def predict_proba(self, X):
                '''Predecir probabilidades.'''
                self._validate_input(X, training=False)
                X = self._convert_to_array(X)
                
                return self._rf.predict_proba(X)
            
            def predict(self, X):
                '''Predecir clases con threshold personalizado.'''
                proba = self.predict_proba(X)
                # Usar threshold personalizado para clase positiva
                return (proba[:, 1] >= self.threshold).astype(int)
            
            def get_params(self, deep=True):
                '''Obtener par√°metros.'''
                return {
                    'n_estimators': self.n_estimators,
                    'max_depth': self.max_depth,
                    'threshold': self.threshold,
                    'name': self.name
                }
        ```
        
        #### üîë Puntos Clave:
        
        - Hereda de `BaseCustomClassifier`
        - Usa `_validate_input()` y `_validate_targets()`
        - Establece `self.is_fitted_ = True` despu√©s de entrenar
        - Implementa `predict_proba()` retornando (n_samples, n_classes)
        - Define todos los hiperpar√°metros en `__init__`
        """,
        "icon": "üìù"
    },
    {
        "title": "üöÄ Ejemplo Avanzado: Red Neuronal",
        "content": """
        ### Clasificador con Red Neuronal Personalizada
        
        Ejemplo m√°s avanzado con preprocessing integrado:
        
        ```python
        from src.models.custom_base import BaseCustomClassifier
        from sklearn.neural_network import MLPClassifier
        from sklearn.preprocessing import StandardScaler
        import numpy as np
        
        class RedNeuronalProfunda(BaseCustomClassifier):
            '''Red neuronal profunda con normalizaci√≥n autom√°tica.'''
            
            def __init__(self, hidden_layers=(200, 100, 50), 
                         learning_rate=0.001, dropout=0.2,
                         max_iter=300, name="RedNeuronalProfunda"):
                super().__init__(name=name)
                self.hidden_layers = hidden_layers
                self.learning_rate = learning_rate
                self.dropout = dropout
                self.max_iter = max_iter
                
                # Componentes internos
                self._scaler = StandardScaler()
                self._mlp = MLPClassifier(
                    hidden_layer_sizes=hidden_layers,
                    learning_rate_init=learning_rate,
                    max_iter=max_iter,
                    early_stopping=True,
                    validation_fraction=0.1,
                    random_state=42
                )
            
            def fit(self, X, y, **kwargs):
                '''Entrenar con normalizaci√≥n autom√°tica.'''
                self._validate_input(X, training=True)
                y = self._validate_targets(y, training=True)
                X = self._convert_to_array(X)
                
                # Normalizar datos
                X_scaled = self._scaler.fit_transform(X)
                
                # Entrenar red neuronal
                self._mlp.fit(X_scaled, y)
                self.is_fitted_ = True
                
                return self
            
            def predict_proba(self, X):
                '''Predecir con normalizaci√≥n.'''
                self._validate_input(X, training=False)
                X = self._convert_to_array(X)
                
                # Normalizar con los par√°metros de entrenamiento
                X_scaled = self._scaler.transform(X)
                
                return self._mlp.predict_proba(X_scaled)
            
            def get_params(self, deep=True):
                return {
                    'hidden_layers': self.hidden_layers,
                    'learning_rate': self.learning_rate,
                    'dropout': self.dropout,
                    'max_iter': self.max_iter,
                    'name': self.name
                }
        ```
        
        #### ‚ö° Caracter√≠sticas Avanzadas:
        
        - Preprocessing integrado (StandardScaler)
        - Early stopping autom√°tico
        - Validaci√≥n durante entrenamiento
        - Gesti√≥n de estado completa
        """,
        "icon": "üöÄ"
    },
    {
        "title": "üîß C√≥mo Usar Tus Modelos",
        "content": """
        ### Proceso Completo de Uso
        
        #### 1Ô∏è‚É£ Definir tu Modelo
        
        Puedes hacerlo de dos formas:
        
        **Opci√≥n A: Editor de C√≥digo** (en esta p√°gina)
        - Escribe tu c√≥digo directamente en el editor
        - Valida la sintaxis en tiempo real
        - Guarda el archivo Python
        
        **Opci√≥n B: Cargar Archivo** (en esta p√°gina)
        - Crea tu modelo en tu editor favorito
        - Sube el archivo `.py`
        - El sistema detecta autom√°ticamente las clases
        
        #### 2Ô∏è‚É£ Entrenar el Modelo
        
        Ve a la p√°gina **ü§ñ Model Training**:
        - Activa "Incluir Modelos Personalizados"
        - Selecciona tu modelo de la lista
        - Configura hiperpar√°metros si es necesario
        - El modelo se entrena con Cross-Validation
        
        #### 3Ô∏è‚É£ Evaluar Resultados
        
        Ve a la p√°gina **üìà Model Evaluation**:
        - Selecciona tu modelo entrenado
        - Obt√©n m√©tricas completas (ROC-AUC, AUPRC, etc.)
        - Compara con modelos est√°ndar
        - Visualiza matrices de confusi√≥n y curvas ROC
        
        #### 4Ô∏è‚É£ Explicar Predicciones
        
        Ve a la p√°gina **üîç Explainability**:
        - Genera valores SHAP
        - Obt√©n feature importance
        - Explica predicciones individuales
        - Identifica patrones del modelo
        
        #### 5Ô∏è‚É£ Usar en Producci√≥n
        
        Ve a la p√°gina **üîÆ Predictions**:
        - Carga nuevos datos de pacientes
        - Usa tu modelo para predicciones
        - Genera reportes cl√≠nicos
        """,
        "icon": "üîß"
    },
    {
        "title": "‚úÖ Buenas Pr√°cticas",
        "content": """
        ### üìö Recomendaciones Importantes
        
        #### ‚úÖ Hacer:
        
        1. **Validaci√≥n de Entrada**
           - Usa `_validate_input()` en `fit()` y `predict()`
           - Verifica dimensiones y tipos de datos
        
        2. **Gesti√≥n de Estado**
           - Marca `self.is_fitted_ = True` despu√©s de entrenar
           - Guarda atributos con underscore final (`coef_`, `classes_`)
        
        3. **Hiperpar√°metros**
           - Define todos en `__init__()`
           - Implementa `get_params()` y `set_params()`
           - Usa valores por defecto razonables
        
        4. **Documentaci√≥n**
           - A√±ade docstrings a todas las funciones
           - Explica los par√°metros del constructor
           - Documenta el prop√≥sito del modelo
        
        5. **Testing**
           - Prueba con datos peque√±os primero
           - Verifica que `predict_proba()` retorna shape correcto
           - Comprueba compatibilidad con cross-validation
        
        #### ‚ùå Evitar:
        
        1. **Modificar datos en lugar (in-place)**
           - No modifiques `X` directamente
           - Usa copias si necesitas transformar
        
        2. **Variables globales**
           - Todo debe ser atributo de la clase
           - No uses estado fuera de `self`
        
        3. **Ignorar validaci√≥n**
           - Siempre valida antes de predecir
           - Verifica que el modelo est√° entrenado
        
        4. **Hardcodear valores**
           - Usa par√°metros configurables
           - Evita magic numbers
        
        5. **Skip preprocessing**
           - Si escalas en `fit()`, escala en `predict()`
           - Guarda transformadores como atributos
        
        #### üéØ Para Clasificaci√≥n Binaria:
        
        ```python
        # ‚úÖ CORRECTO: predict_proba retorna (n_samples, 2)
        def predict_proba(self, X):
            proba_positive = self._model.predict_proba(X)
            proba_negative = 1 - proba_positive
            return np.column_stack([proba_negative, proba_positive])
        
        # ‚ùå INCORRECTO: retorna (n_samples,)
        def predict_proba(self, X):
            return self._model.predict_proba(X)  # Solo una columna
        ```
        """,
        "icon": "‚úÖ"
    },
    {
        "title": "üéì ¬°Listo para Empezar!",
        "content": """
        ### Ya tienes todo lo necesario
        
        #### üìã Checklist Final:
        
        - ‚úÖ Entiendes la estructura de `BaseCustomClassifier`
        - ‚úÖ Conoces los m√©todos requeridos
        - ‚úÖ Has visto ejemplos de c√≥digo
        - ‚úÖ Sabes c√≥mo integrar con el pipeline
        - ‚úÖ Conoces las buenas pr√°cticas
        
        #### üöÄ Pr√≥ximos Pasos:
        
        1. **Crea tu primer modelo** usando el editor o cargando un archivo
        2. **Guarda el c√≥digo** para que est√© disponible en el sistema
        3. **Ve a Model Training** para entrenar tu modelo
        4. **Eval√∫a y compara** con modelos est√°ndar
        5. **Experimenta e itera** hasta obtener los mejores resultados
        
        #### üí° Recursos Adicionales:
        
        - **Documentaci√≥n completa**: `Tools/docs/CUSTOM_MODELS_GUIDE.md`
        - **Ejemplos**: `Tools/src/models/custom_base.py`
        - **Tests**: `Tools/tests/test_custom_models.py`
        
        #### üÜò ¬øNecesitas Ayuda?
        
        Si tienes problemas:
        1. Revisa los mensajes de error en el validador
        2. Consulta la secci√≥n de Troubleshooting en la gu√≠a
        3. Verifica que heredas de la clase base correcta
        4. Comprueba que todos los m√©todos requeridos est√°n implementados
        
        ---
        
        ### ¬°Ahora cierra este tutorial y comienza a crear!
        
        Haz clic en "Completar Tutorial" para acceder al editor de modelos.
        """,
        "icon": "üéì"
    }
]


# ============================================================================
# CODE TEMPLATES
# ============================================================================

TEMPLATE_SIMPLE_CLASSIFIER = '''from src.models.custom_base import BaseCustomClassifier
from sklearn.ensemble import RandomForestClassifier
import numpy as np

class MiClasificadorPersonalizado(BaseCustomClassifier):
    """Clasificador personalizado basado en Random Forest.
    
    Este es un template b√°sico que puedes modificar seg√∫n tus necesidades.
    """
    
    def __init__(self, n_estimators=100, max_depth=None, 
                 min_samples_split=2, name="MiClasificador"):
        """
        Inicializar clasificador.
        
        Args:
            n_estimators: N√∫mero de √°rboles en el bosque
            max_depth: Profundidad m√°xima de los √°rboles
            min_samples_split: M√≠nimo de muestras para dividir un nodo
            name: Nombre del modelo
        """
        super().__init__(name=name)
        self.n_estimators = n_estimators
        self.max_depth = max_depth
        self.min_samples_split = min_samples_split
        
        # Modelo interno
        self._model = RandomForestClassifier(
            n_estimators=n_estimators,
            max_depth=max_depth,
            min_samples_split=min_samples_split,
            random_state=42
        )
    
    def fit(self, X, y, **kwargs):
        """Entrenar el modelo."""
        # Validar entrada
        self._validate_input(X, training=True)
        y = self._validate_targets(y, training=True)
        
        # Convertir a array
        X = self._convert_to_array(X)
        
        # Entrenar
        self._model.fit(X, y)
        self.is_fitted_ = True
        
        return self
    
    def predict_proba(self, X):
        """Predecir probabilidades de clase."""
        self._validate_input(X, training=False)
        X = self._convert_to_array(X)
        
        return self._model.predict_proba(X)
    
    def get_params(self, deep=True):
        """Obtener par√°metros del modelo."""
        return {
            'n_estimators': self.n_estimators,
            'max_depth': self.max_depth,
            'min_samples_split': self.min_samples_split,
            'name': self.name
        }
    
    def set_params(self, **params):
        """Establecer par√°metros del modelo."""
        for key, value in params.items():
            setattr(self, key, value)
        
        # Recrear modelo con nuevos par√°metros
        self._model = RandomForestClassifier(
            n_estimators=self.n_estimators,
            max_depth=self.max_depth,
            min_samples_split=self.min_samples_split,
            random_state=42
        )
        
        return self
'''

TEMPLATE_NEURAL_NETWORK = '''from src.models.custom_base import BaseCustomClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
import numpy as np

class RedNeuronalPersonalizada(BaseCustomClassifier):
    """Red neuronal personalizada con preprocessing integrado.
    
    Incluye normalizaci√≥n autom√°tica y configuraci√≥n avanzada.
    """
    
    def __init__(self, hidden_layers=(100, 50), learning_rate=0.001,
                 max_iter=200, name="RedNeuronal"):
        """
        Inicializar red neuronal.
        
        Args:
            hidden_layers: Tuple con el n√∫mero de neuronas por capa oculta
            learning_rate: Tasa de aprendizaje
            max_iter: N√∫mero m√°ximo de iteraciones
            name: Nombre del modelo
        """
        super().__init__(name=name)
        self.hidden_layers = hidden_layers
        self.learning_rate = learning_rate
        self.max_iter = max_iter
        
        # Componentes
        self._scaler = StandardScaler()
        self._mlp = MLPClassifier(
            hidden_layer_sizes=hidden_layers,
            learning_rate_init=learning_rate,
            max_iter=max_iter,
            early_stopping=True,
            validation_fraction=0.1,
            random_state=42
        )
    
    def fit(self, X, y, **kwargs):
        """Entrenar con normalizaci√≥n autom√°tica."""
        self._validate_input(X, training=True)
        y = self._validate_targets(y, training=True)
        X = self._convert_to_array(X)
        
        # Normalizar
        X_scaled = self._scaler.fit_transform(X)
        
        # Entrenar
        self._mlp.fit(X_scaled, y)
        self.is_fitted_ = True
        
        return self
    
    def predict_proba(self, X):
        """Predecir con normalizaci√≥n."""
        self._validate_input(X, training=False)
        X = self._convert_to_array(X)
        
        X_scaled = self._scaler.transform(X)
        return self._mlp.predict_proba(X_scaled)
    
    def get_params(self, deep=True):
        """Obtener par√°metros."""
        return {
            'hidden_layers': self.hidden_layers,
            'learning_rate': self.learning_rate,
            'max_iter': self.max_iter,
            'name': self.name
        }
'''

TEMPLATE_ENSEMBLE = '''from src.models.custom_base import BaseCustomClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
import numpy as np

class EnsemblePersonalizado(BaseCustomClassifier):
    """Ensemble de m√∫ltiples modelos con votaci√≥n ponderada.
    
    Combina Random Forest, Gradient Boosting y Regresi√≥n Log√≠stica.
    """
    
    def __init__(self, rf_weight=0.4, gb_weight=0.4, lr_weight=0.2,
                 name="Ensemble"):
        """
        Inicializar ensemble.
        
        Args:
            rf_weight: Peso para Random Forest
            gb_weight: Peso para Gradient Boosting
            lr_weight: Peso para Logistic Regression
            name: Nombre del modelo
        """
        super().__init__(name=name)
        self.rf_weight = rf_weight
        self.gb_weight = gb_weight
        self.lr_weight = lr_weight
        
        # Normalizar pesos
        total = rf_weight + gb_weight + lr_weight
        self.rf_weight /= total
        self.gb_weight /= total
        self.lr_weight /= total
        
        # Modelos
        self._rf = RandomForestClassifier(n_estimators=100, random_state=42)
        self._gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
        self._lr = LogisticRegression(max_iter=1000, random_state=42)
    
    def fit(self, X, y, **kwargs):
        """Entrenar todos los modelos."""
        self._validate_input(X, training=True)
        y = self._validate_targets(y, training=True)
        X = self._convert_to_array(X)
        
        # Entrenar cada modelo
        self._rf.fit(X, y)
        self._gb.fit(X, y)
        self._lr.fit(X, y)
        
        self.is_fitted_ = True
        return self
    
    def predict_proba(self, X):
        """Predecir con votaci√≥n ponderada."""
        self._validate_input(X, training=False)
        X = self._convert_to_array(X)
        
        # Obtener probabilidades de cada modelo
        proba_rf = self._rf.predict_proba(X)
        proba_gb = self._gb.predict_proba(X)
        proba_lr = self._lr.predict_proba(X)
        
        # Combinar con pesos
        proba_ensemble = (
            self.rf_weight * proba_rf +
            self.gb_weight * proba_gb +
            self.lr_weight * proba_lr
        )
        
        return proba_ensemble
    
    def get_params(self, deep=True):
        """Obtener par√°metros."""
        return {
            'rf_weight': self.rf_weight,
            'gb_weight': self.gb_weight,
            'lr_weight': self.lr_weight,
            'name': self.name
        }
'''


# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================



def show_onboarding():
    """Mostrar tutorial interactivo de onboarding."""
    st.title("üéì Tutorial: Sistema de Modelos Personalizados")
    
    # Progress bar
    progress = (st.session_state.current_step + 1) / len(ONBOARDING_STEPS)
    st.progress(progress)
    
    # Current step
    step = ONBOARDING_STEPS[st.session_state.current_step]
    
    # Display step content
    st.markdown(f"## {step['icon']} {step['title']}")
    st.markdown(step['content'])
    
    # Navigation buttons
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.session_state.current_step > 0:
            if st.button("‚¨ÖÔ∏è Anterior", use_container_width=True):
                st.session_state.current_step -= 1
                st.rerun()
    
    with col2:
        st.markdown(f"<center>Paso {st.session_state.current_step + 1} de {len(ONBOARDING_STEPS)}</center>", 
                   unsafe_allow_html=True)
    
    with col3:
        if st.session_state.current_step < len(ONBOARDING_STEPS) - 1:
            if st.button("Siguiente ‚û°Ô∏è", use_container_width=True, type="primary"):
                st.session_state.current_step += 1
                st.rerun()
        else:
            if st.button("‚úÖ Completar Tutorial", use_container_width=True, type="primary"):
                st.session_state.onboarding_completed = True
                st.session_state.show_onboarding = False
                st.rerun()
    
    # Skip button
    st.markdown("---")
    if st.button("‚è≠Ô∏è Saltar Tutorial", key="skip_onboarding"):
        st.session_state.onboarding_completed = True
        st.session_state.show_onboarding = False
        st.rerun()


def validate_model_code(code: str) -> dict:
    """
    Validar c√≥digo de modelo personalizado.
    
    Returns:
        dict con 'valid' (bool), 'errors' (list), 'warnings' (list), 'classes' (list)
    """
    result = {
        'valid': True,
        'errors': [],
        'warnings': [],
        'classes': []
    }
    
    try:
        # Intentar compilar el c√≥digo
        compile(code, '<string>', 'exec')
        
        # Ejecutar en un namespace aislado
        namespace = {}
        exec(code, namespace)
        
        # Buscar clases que hereden de BaseCustomModel
        for name, obj in namespace.items():
            if inspect.isclass(obj):
                # Verificar si hereda de BaseCustomModel
                if issubclass(obj, (BaseCustomClassifier, BaseCustomRegressor, BaseCustomModel)):
                    result['classes'].append({
                        'name': name,
                        'type': 'classifier' if issubclass(obj, BaseCustomClassifier) else 'regressor',
                        'bases': [base.__name__ for base in obj.__bases__]
                    })
                    
                    # Verificar m√©todos requeridos
                    required_methods = ['fit', 'predict', 'get_params']
                    if issubclass(obj, BaseCustomClassifier):
                        required_methods.append('predict_proba')
                    
                    for method in required_methods:
                        if not hasattr(obj, method):
                            result['errors'].append(
                                f"Clase '{name}' no tiene el m√©todo requerido '{method}'"
                            )
                            result['valid'] = False
        
        # Verificar que se encontr√≥ al menos una clase v√°lida
        if not result['classes']:
            result['warnings'].append(
                "No se encontraron clases que hereden de BaseCustomClassifier o BaseCustomRegressor"
            )
        
    except SyntaxError as e:
        result['valid'] = False
        result['errors'].append(f"Error de sintaxis en l√≠nea {e.lineno}: {e.msg}")
    except Exception as e:
        result['valid'] = False
        result['errors'].append(f"Error al validar c√≥digo: {str(e)}")
    
    return result


def save_model_code(code: str, filename: str) -> Path:
    """
    Guardar c√≥digo de modelo en el directorio de modelos custom.
    
    Returns:
        Path al archivo guardado
    """
    if not filename.endswith('.py'):
        filename += '.py'
    
    filepath = CODE_TEMPLATES_DIR / filename
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(code)
    
    return filepath


def load_model_code(filepath: Path) -> str:
    """Cargar c√≥digo de modelo desde archivo."""
    with open(filepath, 'r', encoding='utf-8') as f:
        return f.read()


def get_model_class_from_file(filepath: Path):
    """
    Importar din√°micamente una clase de modelo desde un archivo.
    
    Returns:
        dict con informaci√≥n de las clases encontradas
    """
    spec = importlib.util.spec_from_file_location("custom_model", filepath)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    
    classes = []
    for name, obj in inspect.getmembers(module, inspect.isclass):
        if issubclass(obj, (BaseCustomClassifier, BaseCustomRegressor, BaseCustomModel)):
            if obj not in [BaseCustomModel, BaseCustomClassifier, BaseCustomRegressor]:
                classes.append({
                    'name': name,
                    'class': obj,
                    'file': filepath.name,
                    'type': 'classifier' if issubclass(obj, BaseCustomClassifier) else 'regressor'
                })
    
    return classes


def list_available_model_files() -> list:
    """Listar archivos Python en el directorio de modelos custom."""
    if not CODE_TEMPLATES_DIR.exists():
        return []
    
    return sorted([f for f in CODE_TEMPLATES_DIR.glob("*.py") if f.name != "__init__.py"])


# ============================================================================
# MAIN INTERFACE SECTIONS
# ============================================================================

def code_editor_section():
    """Secci√≥n del editor de c√≥digo para definir modelos."""
    st.header("üíª Editor de C√≥digo")
    
    st.markdown("""
    Define tu modelo personalizado escribiendo c√≥digo Python directamente.
    El editor valida autom√°ticamente la sintaxis y detecta las clases de modelo.
    """)
    
    # Template selector
    col1, col2 = st.columns([3, 1])
    
    with col1:
        template_choice = st.selectbox(
            "üìã Comenzar con un template:",
            ["(C√≥digo actual)", "Clasificador Simple", "Red Neuronal", "Ensemble", "Vac√≠o"],
            key="template_selector"
        )
    
    with col2:
        if st.button("üì• Cargar Template", use_container_width=True):
            if template_choice == "Clasificador Simple":
                st.session_state.custom_model_code = TEMPLATE_SIMPLE_CLASSIFIER
            elif template_choice == "Red Neuronal":
                st.session_state.custom_model_code = TEMPLATE_NEURAL_NETWORK
            elif template_choice == "Ensemble":
                st.session_state.custom_model_code = TEMPLATE_ENSEMBLE
            elif template_choice == "Vac√≠o":
                st.session_state.custom_model_code = ""
            st.rerun()
    
    # Code editor
    code = st.text_area(
        "C√≥digo del Modelo:",
        value=st.session_state.custom_model_code,
        height=400,
        key="code_editor",
        help="Escribe tu c√≥digo aqu√≠. Debe incluir una clase que herede de BaseCustomClassifier o BaseCustomRegressor."
    )
    
    # Update session state
    st.session_state.custom_model_code = code
    
    # Action buttons
    col1, col2, col3 = st.columns(3)
    
    with col1:
        validate_btn = st.button("üîç Validar C√≥digo", use_container_width=True, type="primary")
    
    with col2:
        save_enabled = len(code.strip()) > 0
        save_btn = st.button("üíæ Guardar C√≥digo", use_container_width=True, disabled=not save_enabled)
    
    with col3:
        clear_btn = st.button("üóëÔ∏è Limpiar", use_container_width=True)
    
    # Handle buttons
    if clear_btn:
        st.session_state.custom_model_code = ""
        st.rerun()
    
    if validate_btn and code.strip():
        with st.spinner("Validando c√≥digo..."):
            validation = validate_model_code(code)
            
            if validation['valid']:
                st.success("‚úÖ C√≥digo v√°lido!")
                
                if validation['classes']:
                    st.info(f"üì¶ Se encontraron {len(validation['classes'])} clase(s) de modelo:")
                    for cls in validation['classes']:
                        st.markdown(f"- **{cls['name']}** ({cls['type']})")
                
                if validation['warnings']:
                    for warning in validation['warnings']:
                        st.warning(f"‚ö†Ô∏è {warning}")
            else:
                st.error("‚ùå El c√≥digo tiene errores:")
                for error in validation['errors']:
                    st.error(f"‚Ä¢ {error}")
                
                if validation['warnings']:
                    for warning in validation['warnings']:
                        st.warning(f"‚ö†Ô∏è {warning}")
    
    if save_btn and code.strip():
        # Show save dialog
        with st.form("save_model_form"):
            st.subheader("üíæ Guardar Modelo")
            
            filename = st.text_input(
                "Nombre del archivo:",
                value="mi_modelo_personalizado.py",
                help="El archivo se guardar√° en src/models/custom/"
            )
            
            description = st.text_area(
                "Descripci√≥n (opcional):",
                help="Describe qu√© hace tu modelo"
            )
            
            submitted = st.form_submit_button("Guardar", type="primary")
            
            if submitted:
                try:
                    # Validar primero
                    validation = validate_model_code(code)
                    
                    if not validation['valid']:
                        st.error("‚ùå No se puede guardar: el c√≥digo tiene errores")
                        for error in validation['errors']:
                            st.error(f"‚Ä¢ {error}")
                    else:
                        # Guardar archivo
                        filepath = save_model_code(code, filename)
                        
                        # Guardar metadata
                        metadata = {
                            'filename': filename,
                            'description': description,
                            'classes': validation['classes'],
                            'created_at': datetime.now().isoformat(),
                        }
                        
                        metadata_path = filepath.with_suffix('.json')
                        with open(metadata_path, 'w', encoding='utf-8') as f:
                            json.dump(metadata, f, indent=2, ensure_ascii=False)
                        
                        st.success(f"‚úÖ Modelo guardado en: `{filepath}`")
                        st.info("Ahora puedes usar este modelo en la p√°gina de entrenamiento (ü§ñ Model Training)")
                        
                        # Actualizar lista de modelos cargados
                        st.session_state.loaded_model_classes = get_model_class_from_file(filepath)
                        
                except Exception as e:
                    st.error(f"‚ùå Error al guardar: {e}")


def file_upload_section():
    """Secci√≥n para cargar archivos Python con definiciones de modelos."""
    st.header("üìÅ Cargar Archivo Python")
    
    st.markdown("""
    Sube un archivo `.py` que contenga la definici√≥n de tu modelo personalizado.
    El sistema detectar√° autom√°ticamente las clases que heredan de `BaseCustomClassifier` o `BaseCustomRegressor`.
    """)
    
    uploaded_file = st.file_uploader(
        "Selecciona un archivo Python:",
        type=['py'],
        help="Archivo .py con la definici√≥n de tu modelo custom"
    )
    
    if uploaded_file is not None:
        # Leer contenido
        code = uploaded_file.read().decode('utf-8')
        
        # Mostrar preview
        with st.expander("üëÄ Vista previa del c√≥digo", expanded=True):
            st.code(code, language='python')
        
        # Validar
        with st.spinner("Validando archivo..."):
            validation = validate_model_code(code)
        
        # Mostrar resultados de validaci√≥n
        if validation['valid']:
            st.success("‚úÖ Archivo v√°lido!")
            
            if validation['classes']:
                st.info(f"üì¶ Se encontraron {len(validation['classes'])} clase(s) de modelo:")
                
                for cls in validation['classes']:
                    with st.container():
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.markdown(f"""
                            **{cls['name']}**
                            - Tipo: {cls['type']}
                            - Hereda de: {', '.join(cls['bases'])}
                            """)
                        with col2:
                            st.markdown("")  # spacing
                
                # Bot√≥n para importar
                if st.button("üì• Importar al Sistema", type="primary"):
                    try:
                        filename = uploaded_file.name
                        filepath = save_model_code(code, filename)
                        
                        # Guardar metadata
                        metadata = {
                            'filename': filename,
                            'classes': validation['classes'],
                            'imported_at': datetime.now().isoformat(),
                            'source': 'upload'
                        }
                        
                        metadata_path = filepath.with_suffix('.json')
                        with open(metadata_path, 'w', encoding='utf-8') as f:
                            json.dump(metadata, f, indent=2, ensure_ascii=False)
                        
                        st.success(f"‚úÖ Modelo importado exitosamente: `{filepath.name}`")
                        st.info("Ahora puedes usar este modelo en la p√°gina de entrenamiento")
                        
                        # Cargar clases
                        st.session_state.loaded_model_classes = get_model_class_from_file(filepath)
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"‚ùå Error al importar: {e}")
            else:
                st.warning("‚ö†Ô∏è No se encontraron clases de modelo v√°lidas en el archivo")
        
        else:
            st.error("‚ùå El archivo tiene errores:")
            for error in validation['errors']:
                st.error(f"‚Ä¢ {error}")


def model_manager_section():
    """Secci√≥n para gestionar modelos definidos."""
    st.header("üìö Modelos Disponibles")
    
    st.markdown("""
    Aqu√≠ puedes ver y gestionar todos los modelos personalizados que has definido.
    Estos modelos estar√°n disponibles para entrenamiento en la p√°gina **ü§ñ Model Training**.
    """)
    
    # Listar archivos de modelos
    model_files = list_available_model_files()
    
    if not model_files:
        st.info("üì≠ No hay modelos definidos a√∫n. ¬°Crea uno usando el editor o sube un archivo!")
        return
    
    st.markdown(f"**Total de archivos: {len(model_files)}**")
    
    # Mostrar cada modelo
    for model_file in model_files:
        with st.expander(f"üìÑ {model_file.name}", expanded=False):
            try:
                # Cargar c√≥digo
                code = load_model_code(model_file)
                
                # Cargar metadata si existe
                metadata_path = model_file.with_suffix('.json')
                metadata = {}
                if metadata_path.exists():
                    with open(metadata_path, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                
                # Informaci√≥n
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown(f"**Archivo:** `{model_file.name}`")
                    if 'description' in metadata:
                        st.markdown(f"**Descripci√≥n:** {metadata['description']}")
                    if 'created_at' in metadata:
                        created = metadata['created_at'][:10]
                        st.markdown(f"**Creado:** {created}")
                    
                    # Clases encontradas
                    classes = get_model_class_from_file(model_file)
                    if classes:
                        st.markdown("**Clases:**")
                        for cls in classes:
                            st.markdown(f"- `{cls['name']}` ({cls['type']})")
                
                with col2:
                    st.markdown("**Acciones:**")
                    
                    if st.button("üëÅÔ∏è Ver C√≥digo", key=f"view_{model_file.name}"):
                        st.code(code, language='python')
                    
                    if st.button("üìù Editar", key=f"edit_{model_file.name}"):
                        st.session_state.custom_model_code = code
                        st.info("C√≥digo cargado en el editor. Ve a la pesta√±a 'Editor' para editarlo.")
                    
                    if st.button("üóëÔ∏è Eliminar", key=f"delete_{model_file.name}"):
                        try:
                            model_file.unlink()
                            if metadata_path.exists():
                                metadata_path.unlink()
                            st.success(f"‚úÖ Eliminado: {model_file.name}")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Error al eliminar: {e}")
                
            except Exception as e:
                st.error(f"Error al cargar {model_file.name}: {e}")


def documentation_section():
    """Secci√≥n de documentaci√≥n y referencia r√°pida."""
    st.header("üìñ Documentaci√≥n y Referencia")
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üéØ Inicio R√°pido",
        "üìö API Reference",
        "üí° Ejemplos",
        "üÜò Troubleshooting"
    ])
    
    with tab1:
        st.markdown("""
        ### üöÄ Inicio R√°pido
        
        #### Flujo de Trabajo B√°sico:
        
        1. **Define tu modelo** (Editor o Upload)
           ```python
           from src.models.custom_base import BaseCustomClassifier
           
           class MiModelo(BaseCustomClassifier):
               def __init__(self, param=100):
                   super().__init__(name="MiModelo")
                   self.param = param
               
               def fit(self, X, y, **kwargs):
                   # Tu l√≥gica de entrenamiento
                   self.is_fitted_ = True
                   return self
               
               def predict_proba(self, X):
                   # Tu l√≥gica de predicci√≥n
                   return probas
           ```
        
        2. **Guarda el c√≥digo** en el sistema
        
        3. **Ve a ü§ñ Model Training**
           - Activa "Incluir Modelos Personalizados"
           - Selecciona tu modelo
           - Entrena con Cross-Validation
        
        4. **Eval√∫a en üìà Model Evaluation**
           - Obt√©n m√©tricas completas
           - Compara con otros modelos
        
        5. **Explica en üîç Explainability**
           - Genera valores SHAP
           - Analiza feature importance
        """)
    
    with tab2:
        st.markdown("""
        ### üìö API Reference
        
        #### BaseCustomClassifier
        
        **M√©todos Requeridos:**
        
        ```python
        def __init__(self, **params):
            '''Inicializar con hiperpar√°metros.'''
            super().__init__(name="MiModelo")
            # Guarda tus par√°metros
        
        def fit(self, X, y, **kwargs):
            '''Entrenar el modelo.
            
            Args:
                X: Features (n_samples, n_features)
                y: Target (n_samples,)
            
            Returns:
                self
            '''
            self._validate_input(X, training=True)
            y = self._validate_targets(y, training=True)
            # Tu c√≥digo de entrenamiento
            self.is_fitted_ = True
            return self
        
        def predict_proba(self, X):
            '''Predecir probabilidades.
            
            Args:
                X: Features (n_samples, n_features)
            
            Returns:
                np.ndarray: Probabilidades (n_samples, n_classes)
            '''
            self._validate_input(X, training=False)
            # Tu c√≥digo de predicci√≥n
            return probas  # Shape: (n_samples, 2) para binario
        
        def get_params(self, deep=True):
            '''Obtener par√°metros.'''
            return {'param1': self.param1, ...}
        
        def set_params(self, **params):
            '''Establecer par√°metros.'''
            for key, value in params.items():
                setattr(self, key, value)
            return self
        ```
        
        **Atributos Importantes:**
        
        - `self.classes_`: Array con las clases (set en fit)
        - `self.is_fitted_`: bool indicando si est√° entrenado
        - `self.n_features_in_`: N√∫mero de features (set autom√°ticamente)
        - `self.feature_names_in_`: Nombres de features (set autom√°ticamente)
        
        **M√©todos Helper:**
        
        - `_validate_input(X, training=False)`: Valida formato de entrada
        - `_validate_targets(y, training=False)`: Valida targets
        - `_convert_to_array(X)`: Convierte DataFrame a array
        """)
    
    with tab3:
        st.markdown("""
        ### üí° Ejemplos Comunes
        
        #### 1. Threshold Personalizado
        
        ```python
        class ThresholdClassifier(BaseCustomClassifier):
            def __init__(self, threshold=0.5):
                super().__init__(name="ThresholdClassifier")
                self.threshold = threshold
                self._model = LogisticRegression()
            
            def fit(self, X, y, **kwargs):
                self._validate_input(X, training=True)
                y = self._validate_targets(y, training=True)
                X = self._convert_to_array(X)
                
                self._model.fit(X, y)
                self.is_fitted_ = True
                return self
            
            def predict_proba(self, X):
                self._validate_input(X, training=False)
                X = self._convert_to_array(X)
                return self._model.predict_proba(X)
            
            def predict(self, X):
                proba = self.predict_proba(X)
                return (proba[:, 1] >= self.threshold).astype(int)
        ```
        
        #### 2. Preprocessing Integrado
        
        ```python
        class ScaledClassifier(BaseCustomClassifier):
            def __init__(self):
                super().__init__(name="ScaledClassifier")
                self._scaler = StandardScaler()
                self._model = SVC(probability=True)
            
            def fit(self, X, y, **kwargs):
                self._validate_input(X, training=True)
                y = self._validate_targets(y, training=True)
                X = self._convert_to_array(X)
                
                X_scaled = self._scaler.fit_transform(X)
                self._model.fit(X_scaled, y)
                self.is_fitted_ = True
                return self
            
            def predict_proba(self, X):
                self._validate_input(X, training=False)
                X = self._convert_to_array(X)
                X_scaled = self._scaler.transform(X)
                return self._model.predict_proba(X_scaled)
        ```
        
        #### 3. Stacking de Modelos
        
        ```python
        class StackingClassifier(BaseCustomClassifier):
            def __init__(self):
                super().__init__(name="Stacking")
                self._base_models = [
                    RandomForestClassifier(),
                    GradientBoostingClassifier(),
                ]
                self._meta_model = LogisticRegression()
            
            def fit(self, X, y, **kwargs):
                self._validate_input(X, training=True)
                y = self._validate_targets(y, training=True)
                X = self._convert_to_array(X)
                
                # Train base models
                base_predictions = []
                for model in self._base_models:
                    model.fit(X, y)
                    base_predictions.append(model.predict_proba(X))
                
                # Stack predictions
                X_meta = np.column_stack(base_predictions)
                
                # Train meta model
                self._meta_model.fit(X_meta, y)
                self.is_fitted_ = True
                return self
            
            def predict_proba(self, X):
                self._validate_input(X, training=False)
                X = self._convert_to_array(X)
                
                base_predictions = []
                for model in self._base_models:
                    base_predictions.append(model.predict_proba(X))
                
                X_meta = np.column_stack(base_predictions)
                return self._meta_model.predict_proba(X_meta)
        ```
        """)
    
    with tab4:
        st.markdown("""
        ### üÜò Problemas Comunes y Soluciones
        
        #### ‚ùå Error: "Model must be fitted before prediction"
        
        **Causa:** No se estableci√≥ `self.is_fitted_ = True` en `fit()`
        
        **Soluci√≥n:**
        ```python
        def fit(self, X, y, **kwargs):
            # ... tu c√≥digo de entrenamiento ...
            self.is_fitted_ = True  # ¬°No olvides esto!
            return self
        ```
        
        #### ‚ùå Error: "X has wrong number of features"
        
        **Causa:** No se est√° usando `_validate_input()`
        
        **Soluci√≥n:**
        ```python
        def fit(self, X, y, **kwargs):
            self._validate_input(X, training=True)  # Guarda n_features
            # ...
        
        def predict_proba(self, X):
            self._validate_input(X, training=False)  # Verifica n_features
            # ...
        ```
        
        #### ‚ùå Error: "predict_proba returns wrong shape"
        
        **Causa:** Para clasificaci√≥n binaria, debe retornar (n_samples, 2)
        
        **Soluci√≥n:**
        ```python
        def predict_proba(self, X):
            # Si tu modelo solo retorna probabilidad de clase positiva:
            proba_pos = self._model.predict_proba(X)
            proba_neg = 1 - proba_pos
            return np.column_stack([proba_neg, proba_pos])
        ```
        
        #### ‚ùå Error: "Missing classes_ attribute"
        
        **Causa:** No se llam√≥ `_validate_targets()` en `fit()`
        
        **Soluci√≥n:**
        ```python
        def fit(self, X, y, **kwargs):
            self._validate_input(X, training=True)
            y = self._validate_targets(y, training=True)  # Establece classes_
            # ...
        ```
        
        #### ‚ùå SHAP no funciona
        
        **Causa:** Modelo demasiado complejo o datos muy grandes
        
        **Soluci√≥n:**
        - Reduce el tama√±o de muestra para SHAP
        - Usa permutation importance como alternativa
        - Simplifica la arquitectura del modelo
        
        #### ‚ùå Cross-validation falla
        
        **Causa:** `get_params()` o `set_params()` no implementados correctamente
        
        **Soluci√≥n:**
        ```python
        def get_params(self, deep=True):
            return {
                'param1': self.param1,
                'param2': self.param2,
                # Lista TODOS tus hiperpar√°metros
            }
        
        def set_params(self, **params):
            for key, value in params.items():
                setattr(self, key, value)
            # Recrea modelos internos si es necesario
            return self
        ```
        """)


# ============================================================================
# MAIN PAGE LAYOUT
# ============================================================================

def main():
    """Funci√≥n principal de la p√°gina."""
    
    # Check if onboarding should be shown
    if not st.session_state.onboarding_completed or st.session_state.show_onboarding:
        show_onboarding()
        return
    
    # Main interface
    st.title("üîß Sistema de Modelos Personalizados")
    st.markdown("""
    Crea, define y gestiona tus propios modelos de Machine Learning para integrarlos 
    con el sistema de predicci√≥n de mortalidad por IAM.
    """)
    
    # Show onboarding toggle in sidebar
    with st.sidebar:
        st.markdown("---")
        if st.button("üéì Mostrar Tutorial", use_container_width=True):
            st.session_state.show_onboarding = True
            st.session_state.current_step = 0
            st.rerun()
    
    # Main tabs
    tab1, tab2, tab3, tab4 = st.tabs([
        "üíª Editor de C√≥digo",
        "üìÅ Cargar Archivo",
        "üìö Gestionar Modelos",
        "üìñ Documentaci√≥n"
    ])
    
    with tab1:
        code_editor_section()
    
    with tab2:
        file_upload_section()
    
    with tab3:
        model_manager_section()
    
    with tab4:
        documentation_section()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
    <p><strong>Sistema de Modelos Personalizados</strong> | Mortality AMI Predictor</p>
    <p>üí° <em>Tip: Los modelos que definas aqu√≠ estar√°n disponibles en la p√°gina de entrenamiento</em></p>
    </div>
    """, unsafe_allow_html=True)


# Run main
if __name__ == "__main__":
    main()
